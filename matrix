#!/bin/sh
# The Matrix (1999) screen rain effect

BINARY='01'
DIGITS='0123456789'
LOWER='abcdefghijklmnopqrstuvwxyz'
UPPER='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
KATAKANA_H='ｱｲｳｴｵｶｷｸｹｺｻｽｾﾀﾁﾃﾄﾅﾆﾇﾈﾊﾋﾌﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦ'
KATAKANA_F='アイウエオカキクケコサスセタチテトナニヌネハヒフホマミムメモヤユヨラリルレロワヲ'
# shellcheck disable=SC1003 # because we literally need \\
SPECIAL='()[]{}/\\'

bname=$(basename "$0")
USAGE=$(printf "%s" "\
Usage: $bname [OPTION...]
OPTIONS
    -h, --help          Display help
    -b, --binary        Use binary characters  [$BINARY]
    -d, --digits        Use digit characters   [$DIGITS]
    -l, --lower         Use lower case letters [$LOWER]
    -u, --upper         Use upper case letters [$UPPER]
    -s, --special       Use special characters [$SPECIAL]
    -t, --testing       Activate character testing mode
    -c, --custom        Use custom characters specified 'inside single quotes'
    -m, --message       Provide a message to display in the center
    -i, --message_int   Provide an integer from 0-9 that modifies the message
    -k, --halfwidth     Use half-width characters of Japanese katakana
                        [$KATAKANA_H]
    -K, --fullwidth     Use full-width Japanese katakana characters.
                        Will not work, provided as a reference!
[$KATAKANA_F]
EXAMPLES
    $bname -du
    $bname -bi 5 -m 'TEST MESSAGE'
    $bname -b --custom='!?/\\\\' --testing
")

input_validation() {
    # show usage if option not supplied
    err_txt="Provide option which should start with '-(option) or --(longoption)'."
    case "$1" in
        ''|--|-) # empty option
            printf "%s\n" "$err_txt"
            echo "$USAGE"
            exit 1
            ;;
        --*|-*) # assume that such options are the right options
            return
            ;;
        *)
            printf "%s\n" "$err_txt"
            echo "$USAGE"
            exit 1
            ;;
    esac
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=bc:dhi:kKlm:stu
    LONG=binary,custom:,digits,help,message_int:,fullwidth,lower,message:,halfwidth,special,testing,upper
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    input_validation "$@"
    # PLACE FOR OPTION DEFAULTS
    message='NEO THE MATRIX HAS YOU'
    message_int=0 # int from 0 to 9 including
    LETTERS=""
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -b|--binary)
            LETTERS="${LETTERS}${BINARY}"
            ;;
        -c|--custom)
            shift
            LETTERS="${LETTERS}${1}"
            ;;
        -d|--digits)
            LETTERS="${LETTERS}${DIGITS}"
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -i|--message_int)
            shift
            message_int="$1"
            ;;
        -k|--halfwidth)
            LETTERS="${LETTERS}${KATAKANA_H}"
            ;;
        -K|--fullwidth)
            LETTERS="${LETTERS}${KATAKANA_F}"
            ;;
        -l|--lower)
            LETTERS="${LETTERS}${LOWER}"
            ;;
        -m|--message)
            shift
            message="$1"
            ;;
        -s|--special)
            LETTERS="${LETTERS}${SPECIAL}"
            ;;
        -t|--testing)
            testing=1
            ;;
        -u|--upper)
            LETTERS="${LETTERS}${UPPER}"
            ;;
        --)
            shift
            # NOTE: here in case --testing is not the last option
            if [ "$testing" ]; then
                printf "characters:\t[%s]\n" "$LETTERS"
                printf "length + 1:\t(%s)\n" "$((${#LETTERS} + 1))"
                exit 0
            fi
            break
            ;;
        esac
        shift
    done
}

remainder() {
    rnum=$(shuf -n 1 -i "1-$cols")
    echo $((rnum%$1))
}

main() {
    lines=$(tput lines)
    cols=$(tput cols)
    message_len="$((${#message} - 3))"
    cent_v=$(((lines / 2) + (1))) # find vertical center
    cent_h=$(((cols / 2) - (message_len / 2))) # find horizontal center
    # shellcheck disable=SC2016
    awkscript='
    {
        lines=$1;
        random_col=$3;
        c=$4;
        letter=substr(LETTERS,c,1);
        cols[random_col]=0;
        for (col in cols) {
            rnum = int(30*rand());
            if (cols[col] < 0) {
                line=-cols[col];
                cols[col]=cols[col]-1;
                printf "\033[%s;%sH%s\033[0;0H", line, col, " ";
                if (actcol >= lines) {
                    cols[col]=0;
                } else if (rnum < 1) {
                    cols[col]=0;
                }
            } else {
                line=cols[col]+1;
                cols[col]=cols[col]+1;
                if (rnum < 3) {
                    printf "\033[%s;%sH\033[0;32m%s\033[0m", line, col, letter;
                } else {
                    printf "\033[%s;%sH\033[0;97m%s\033[0m", line+1, col, letter;
                    printf "\033[%s;%sH\033[2;32m%s\033[0m", line, col, letter;
                }
                printf "\033[%s;%sH\033[%s;32m%s\033[0;0H\033[0m", cent_v, cent_h, message_int, message;
                if (cols[col] >= lines) {
                    if (rnum < 2) {
                        cols[col]=0;
                    } else {
                        cols[col]=-1;
                    }
                }
            }
        }
    }
    '
    printf "\e[0;32m"
    clear
    if [ -t 0 ]; then
        stty -echo -icanon -icrnl time 0 min 0;
        tput civis # hide cursor
    fi
    keypress=''
    llen="$((${#LETTERS} + 1))"
    while [ -z "$keypress" ]; do
        rc=$(remainder "$cols")
        rl=$(remainder "$llen")
        echo "$lines $cols $rc $rl"
        sleep 0.04
        keypress="$(cat -v)"
    done | awk \
        -v message="$message" -v message_int="$message_int" \
        -v cent_h="$cent_h" -v cent_v="$cent_v" \
        -v LETTERS="$LETTERS" "$awkscript"
    if [ -t 0 ]; then
        stty sane;
        tput cnorm # restore cursor
    fi
    clear
}

get_opt "$@"
main
